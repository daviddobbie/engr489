%% Tapered Area BFF Estimator
% Programmed by: David Dobbie
% Victoria University of Wellington
%
% Recreation of:
% Estimation of petrophysical and fluid properties using integral
% transforms in nuclear magnetic resonance
% by
% F. K. Gruber et al / Journal of Magnetic Resonance 228 (2013) 104-115

function [estimate compute_time] = tapered_area(Tc, m, K, n_sigma,...
    T2, tE, prior_matrix)
    
    tic;


    N2 = length(m);
    Ny = length(T2);
    
    
    
    g_poro = ones(Ny,1);
    

    Cf = cov(prior_matrix');
    Cn = (n_sigma)^2*eye(N2);
    
    mu_prior_f = mean(prior_matrix')';
    
    R = Cf * K' * inv(K* Cf * K' + Cn);
    
    est_f = (  R * (m - K*mu_prior_f) + mu_prior_f);
    
    estimate_bfv = g_bfv' * est_f;
    estimate_porosity = g_poro' * est_f;

    estimate = estimate_bfv / estimate_porosity;
    
    %est_uncertainty = sqrt(g_bfv'  *   (Cf - R*K*Cf')  *  g_bfv);
    
    
    
    
    
    compute_time = toc;
end



% Discretised Exponential Haar Transform. Used for computing the tapered
% areas
% INPUTS: 
%    m = N x 1 measurement vector
%    Tc = the bound and fluid fraction point (in time)
%    tE = sample interval of m
%    sigma_n = standard deviation of the noise
%    T2 = T2 relaxation axis
% OUTPUTS:
%    area = the T2 tapered area (where K(T2) > f(T2))
%    area_uncert = the T2 uncertainty of the tapered area

function [area area_uncert] = exponentialHaarTransform(tE, M, sigma_n, Tc, T2,tau2)
    area = 0;
    area_uncert = 0;

    % set up in table 1 of paper
    C = 0.7213 / Tc;
    alpha = 1.572*Tc;
    beta = 0.4087 / Tc;
    gamma = 1./T2 + beta;
    N = length(M);

    % implementing (-1)^n as vector operator  
    n = floor(tau2/(2*alpha));
    n_term = ((-1).^n)';    
    k = C.*n_term'.*exp(-beta * tau2);
    area = tE * (k' * M); % eq5
    
    area_uncert = (sigma_n)^2 *tE * ((tE * k')*k); % eq6
    %kernel = (C./gamma).*tanh(alpha*gamma);
end

